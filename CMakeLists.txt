# file is generated by Visual Studio 2022

# CMakeList.txt : CMake project for PLCStarter, include source and define
# project specific logic here.
#
cmake_minimum_required (VERSION 3.8)

project ("PLCStarter")


# Add source to this project's executable.

add_executable (PLCStarter 
            "src/PLC_IO_data.hpp"
            "src/PLC_IO_bridge.cpp"
            "src/PLC_IO_bridge.hpp"
			"src/App_controler.cpp"
            "src/App_controler.hpp"
            "src/Starter.cpp"         
            "src/Starter.cpp"
            "src/thread.h"
            "src/Server.h"
            "src/PLCServer.h"
            "src/StarterConfig.cpp"
            "src/StarterConfig.h"
            "src/PLCServer.cpp"
            "src/App_builder.cpp"
            "src/App_builder.hpp"
            "src/gpio.hpp")

add_executable (TestApp 
            "src/user_app/TestApp.cpp"
            "src/user_app/PLC_app.cpp"
            "src/user_app/PLC_app.hpp"
            "src/PLC_IO_data.hpp"
            "src/PLC_IO_bridge.cpp"
            "src/PLC_IO_bridge.hpp"
            )

add_library(PLCAppLib
            "src/user_app/PLC_app.cpp"
            "src/user_app/PLC_app.hpp"
            "src/PLC_IO_data.hpp"
            "src/PLC_IO_bridge.cpp"
            "src/PLC_IO_bridge.hpp"
            )


# include/link boost library
target_include_directories(PLCStarter PRIVATE "${CMAKE_SOURCE_DIR}/boost_1_79_0")
target_link_directories(PLCStarter PRIVATE "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib")

target_include_directories(TestApp PRIVATE "${CMAKE_SOURCE_DIR}/boost_1_79_0")
target_link_directories(TestApp PRIVATE "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib")

target_include_directories(PLCAppLib PRIVATE "${CMAKE_SOURCE_DIR}/boost_1_79_0")
target_link_directories(PLCAppLib PRIVATE "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib")


# defines
target_compile_definitions(PLCStarter PRIVATE PLC_IO_BRIDGE_CREATE=1)
target_compile_definitions(TestApp    PRIVATE PLC_IO_BRIDGE_CONNECT=1)
target_compile_definitions(PLCAppLib  PRIVATE PLC_IO_BRIDGE_CONNECT=1)

if (UNIX)
	# allow Raspberry pi to use gpio
	target_compile_definitions(PLCStarter PRIVATE USE_PHYSICAL_GPIO=1)

  ### PLCStarter

	# link libraries:
	#	-pthread, libboost_json.a, libboost_filesystem.a, rt 
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
	target_link_libraries(PLCStarter "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib/libboost_json.a")
	target_link_libraries(PLCStarter "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib/libboost_filesystem.a" rt)

	# reduce memory usage during compilation on Raspberry pi
	# !!! IMPORTANT !!!
	# this will make compilation time significanty longer
	target_compile_options(PLCStarter PRIVATE "SHELL:--param ggc-min-expand=1" "SHELL:--param ggc-min-heapsize=700")


  ### TestApp

	# link libraries:
	#	-pthread, libboost_json.a, libboost_filesystem.a, rt 
	target_link_libraries(TestApp "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib/libboost_json.a")
	target_link_libraries(TestApp "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib/libboost_filesystem.a" rt)
	
	# reduce memory usage during compilation on Raspberry pi
	# !!! IMPORTANT !!!
	# this will make compilation time significanty longer
	target_compile_options(TestApp    PRIVATE "SHELL:--param ggc-min-expand=1" "SHELL:--param ggc-min-heapsize=700")


  ### PLCappLib

	# link libraries:
	#	-pthread, libboost_json.a, libboost_filesystem.a, rt 
	target_link_libraries(PLCAppLib "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib/libboost_json.a")
	target_link_libraries(PLCAppLib "${CMAKE_SOURCE_DIR}/boost_1_79_0/stage/lib/libboost_filesystem.a" rt)
	
	# reduce memory usage during compilation on Raspberry pi
	# !!! IMPORTANT !!!
	# this will make compilation time significanty longer
	target_compile_options(PLCAppLib    PRIVATE "SHELL:--param ggc-min-expand=1" "SHELL:--param ggc-min-heapsize=700")

endif(UNIX)


# change default out dir
set_target_properties( PLCStarter TestApp PLCAppLib
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/build/"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/build/"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/build/"
)

# trick from https://stackoverflow.com/questions/7747857/in-cmake-how-do-i-work-around-the-debug-and-release-directories-visual-studio-2
# prevents creating Debug and Release directories
if ( MSVC )


	set_target_properties( PLCStarter TestApp PLCAppLib
		PROPERTIES
		ARCHIVE_OUTPUT_DIRECTORY           "${CMAKE_BINARY_DIR}/build/"
		ARCHIVE_OUTPUT_DIRECTORY_DEBUG     "${CMAKE_BINARY_DIR}/build/"
		ARCHIVE_OUTPUT_DIRECTORY_RELEASE   "${CMAKE_BINARY_DIR}/build/"
		LIBRARY_OUTPUT_DIRECTORY           "${CMAKE_BINARY_DIR}/build/"
		LIBRARY_OUTPUT_DIRECTORY_DEBUG     "${CMAKE_BINARY_DIR}/build/"
		LIBRARY_OUTPUT_DIRECTORY_RELEASE   "${CMAKE_BINARY_DIR}/build/"
		RUNTIME_OUTPUT_DIRECTORY           "${CMAKE_BINARY_DIR}/build/"
		RUNTIME_OUTPUT_DIRECTORY_DEBUG     "${CMAKE_BINARY_DIR}/build/"
		RUNTIME_OUTPUT_DIRECTORY_RELEASE   "${CMAKE_BINARY_DIR}/build/"
	)

endif ( MSVC )




# post build commands
# trick from https://stackoverflow.com/questions/9994045/copy-target-file-to-another-location-in-a-post-build-step-in-cmake
add_custom_command(TARGET PLCStarter POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy "./src/user_app/PLC_app.hpp" "${CMAKE_BINARY_DIR}/build/include/PLC_app.hpp"
	COMMAND ${CMAKE_COMMAND} -E copy "./starter.config" "${CMAKE_BINARY_DIR}/build/starter.config"
	COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/build/app_root"
)

add_custom_command(TARGET TestApp POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy "$<TARGET_FILE:TestApp>" "${CMAKE_BINARY_DIR}/build/app_root/build/app.exe"
)


# set language standard to c++11
if (CMAKE_VERSION VERSION_GREATER 3.12)
  set_property(TARGET PLCStarter PROPERTY CXX_STANDARD 20)
  set_property(TARGET TestApp PROPERTY CXX_STANDARD 20)
endif()

# TODO: Add tests and install targets if needed.
